events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log format for debugging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Upstream for our auth service
    upstream auth_service {
        server tuf-client-verify:8080;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Auth endpoint for internal auth_request calls
        location = /auth {
            internal;
            proxy_pass http://auth_service/auth;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Container registry API endpoints with auth
        location ~ ^/v2/library/([^/]+)/manifests/(.+)$ {
            auth_request /auth;
            
            # Set variables for the manifest request
            set $image $1;
            set $tag $2;
            
            # Add auth headers for debugging
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_response $upstream_response_length;
            
            # Serve static manifest files
            alias /usr/share/nginx/html/static/manifests/$image-$tag.json;
            add_header Content-Type "application/vnd.docker.distribution.manifest.v2+json";
            add_header X-Auth-Status $auth_status;
        }

        # Container registry API - blobs (for completeness)
        location ~ ^/v2/library/([^/]+)/blobs/(.+)$ {
            auth_request /auth;
            
            # For PoC, just return a simple response
            return 200 "blob data placeholder";
            add_header Content-Type "application/octet-stream";
        }

        # Docker registry API version check
        location /v2/ {
            auth_request /auth;
            return 200 '{"registry": "TUF Client Verify PoC"}';
            add_header Content-Type "application/json";
        }

        # Health check endpoint (no auth required)
        location /nginx-health {
            return 200 "nginx healthy";
            add_header Content-Type "text/plain";
        }

        # Default location for debugging
        location / {
            return 404 '{"error": "Not Found", "message": "This is a PoC registry. Try /v2/library/alpine/manifests/latest"}';
            add_header Content-Type "application/json";
        }

        # Error pages
        error_page 401 403 /auth_error.json;
        location = /auth_error.json {
            internal;
            return 403 '{"error": "Forbidden", "message": "Access denied by TUF verification"}';
            add_header Content-Type "application/json";
        }
    }
}
